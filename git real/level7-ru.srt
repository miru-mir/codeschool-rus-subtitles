1
00:00:27,530 --> 00:00:28,730
Это Git Real.

2
00:00:28,730 --> 00:00:29,760
Вы дошли до
финального уровня.

3
00:00:29,760 --> 00:00:34,240
Мы поговорм об
истории и конфигурации.

4
00:00:34,240 --> 00:00:37,780
На предыдущих уровнях мы
использовали git log много раз

5
00:00:37,780 --> 00:00:39,620
что бы увидеть список последних коммитов.

6
00:00:39,620 --> 00:00:43,570
Эти коммиты обыно включают в себя
SHA хэш,

7
00:00:43,570 --> 00:00:46,510
автора, дату, и
комментарий к коммиту.

8
00:00:46,510 --> 00:00:49,690
Вывод логов
это не та вещь, которую

9
00:00:49,690 --> 00:00:51,890
просто читать. Поэтому мы пройдёмся
по способам, как сделать

10
00:00:51,890 --> 00:00:54,390
этот вывод более читаемым.

11
00:00:54,390 --> 00:00:56,680
Первая вещь, которую стоит сделать,
если вы её, конечно, уже не сделали,

12
00:00:56,680 --> 00:00:58,750
это включить цвета в UI.

13
00:00:58,750 --> 00:01:02,260
Это сделает более заметным
хэш вашего коммита.

14
00:01:02,260 --> 00:01:05,910
Можно, конечно, ещё больше
изменить выводы логов.

15
00:01:05,910 --> 00:01:09,470
Итак, если вы сделаете 
git log --pretty=oneline, то это

16
00:01:09,470 --> 00:01:12,480
покажет каждый коммит отдельной линией.
SHA в началае

17
00:01:12,480 --> 00:01:15,350
и за ним комментарий
к комиту.

18
00:01:15,350 --> 00:01:18,470
Можно сделать даже лучше, можно
отформатировать вывод логов

19
00:01:18,470 --> 00:01:21,190
что бы он выглядел именно так
как вы этого хотите.

20
00:01:21,190 --> 00:01:24,030
Можно использовать целую кучу
спецсимволов, что бы

21
00:01:24,030 --> 00:01:26,380
организовать коммит в выводе вашего лога.

22
00:01:26,380 --> 00:01:29,570
Если вы хотите видеть каждое изменение
коммита, в вашем логе

23
00:01:29,570 --> 00:01:31,510
вы можете использовать комманду

24
00:01:31,510 --> 00:01:34,950
git log --oneline -p
 для вывода пути.

25
00:01:34,950 --> 00:01:37,620
И это покажет какие линии
были стёрты и какие линии

26
00:01:37,620 --> 00:01:39,690
были добавлены
в файле, что мы

27
00:01:39,690 --> 00:01:42,790
модифицировали, делая на ему коммит.

28
00:01:42,790 --> 00:01:46,430
git log --oneline --stat
покажет как много было вставок

29
00:01:46,430 --> 00:01:48,720
и удалений
 в каждом файле

30
00:01:48,720 --> 00:01:52,550
включённом в каждый коммит.

31
00:01:52,550 --> 00:01:54,960
Если мы используем опцию graph,
у нас будет визуальное

32
00:01:54,960 --> 00:01:58,130
представление веток
и коммитов, поэтому

33
00:01:58,130 --> 00:02:02,010
может, можно будет увидеть
пузыри слияний.

34
00:02:02,010 --> 00:02:05,000
Всегда полезно
иметь всю историю

35
00:02:05,000 --> 00:02:05,940
логов.

36
00:02:05,940 --> 00:02:09,789
Поэтому вы можете обозначить
диапозон между определенной датой

37
00:02:09,789 --> 00:02:13,070
и датой до которой вы
хотите видеть лог.

38
00:02:13,070 --> 00:02:16,380
Вы так же можете ограничить вывод
лога, основываясь на времени

39
00:02:16,380 --> 00:02:20,460
Для этого нужно использовать такие флаги
 1 minute ago,
since 1 day ago, since 2 weeks

40
00:02:20,460 --> 00:02:24,910
ago, или между month ago
и until 2 weeks ago.

41
00:02:24,910 --> 00:02:27,530
Как вы видели ранее, git diff
может быть очень полезным для

42
00:02:27,530 --> 00:02:30,180
того что быы видеть изменения
с момента нашего пролого коммита.

43
00:02:30,180 --> 00:02:33,350
Вы можете видеть стертые линии
и добавленные линии

44
00:02:33,350 --> 00:02:34,600
в файлах.

45
00:02:36,680 --> 00:02:42,030
git diff HEAD делает в точности
тоже что и git diff.

46
00:02:42,030 --> 00:02:43,990
Если вы хотите увидеть различия
между этими файлами

47
00:02:43,990 --> 00:02:47,770
сейчас или через 2, или 3, или 5 коммитов,
 diff даст вам

48
00:02:47,770 --> 00:02:51,540
нужные комманды, что бы это сделать.

49
00:02:51,540 --> 00:02:55,000
Вы так же можете сравнить два
различных коммита

50
00:02:55,000 --> 00:02:59,380
Чем последний отличается от предпоследнего.

51
00:02:59,380 --> 00:03:02,380
Если вы помните, мы видели в логе 
 SHA наших коммитов.

52
00:03:02,380 --> 00:03:05,380
Вы можете использовать их
что бы увидеть различия между двумя
коммитами

53
00:03:05,380 --> 00:03:08,620
указав SHA.

54
00:03:08,620 --> 00:03:11,780
Иногда вы будуте видеть 
 сокращения этих SHA хэшей

55
00:03:11,780 --> 00:03:12,400
в таких местах, как GitHub.

56
00:03:12,400 --> 00:03:16,160
Вы так же можете использовать
эти сокращенные SHA
 хэши для выолнения diffs,

57
00:03:16,160 --> 00:03:18,990
или, можете использовать ветки
 для выполнения diffs.

58
00:03:18,990 --> 00:03:22,110
Итак, для примера, вы можете написать
git diff master bird

59
00:03:22,110 --> 00:03:24,480
если у вас есть ветка bird
которую вы хотите сравнить.

60
00:03:24,480 --> 00:03:27,260
Наконец, как и в git log, вы можете
использовать диапозоны времени

61
00:03:27,260 --> 00:03:30,220
для git diffs.

62
00:03:30,220 --> 00:03:32,720
Когда проекты запускаются
иногда вы

63
00:03:32,720 --> 00:03:35,120
с такими изменениями в файлах,
которые вы реально

64
00:03:35,120 --> 00:03:36,710
не можете понять.

65
00:03:36,710 --> 00:03:39,070
И хороший инструмент для таких
ситуаций это git blame.

66
00:03:39,070 --> 00:03:42,970
Вы можете выполнить git blame и затем
имя файл, что бы посмотреть все

67
00:03:42,970 --> 00:03:47,680
изменения на каждой линии кода и
и кем и когда был сделал коммит,

68
00:03:47,680 --> 00:03:49,230
который внёс эти изменения.

69
00:03:49,230 --> 00:03:52,680
Итак, давайте перейдём
к более продвинотой настройке.

70
00:03:52,680 --> 00:03:55,050
Может наступить время в проекте,
когда вам нужно будет работать

71
00:03:55,050 --> 00:03:57,960
над определенной дирректорией, но вы
не хотите включать её в

72
00:03:57,960 --> 00:04:00,510
в репозиторий
и делиться ей с остальными.

73
00:04:01,920 --> 00:04:04,220
В этом случае, у нас есть
экспериментальная дирректория

74
00:04:04,220 --> 00:04:06,900
которую мы хотим исключить
из нашего локального репозитория

75
00:04:08,260 --> 00:04:11,800
Мы можем вложить
эту дирректорию в

76
00:04:11,800 --> 00:04:15,190
файл исключений git info.

77
00:04:15,190 --> 00:04:17,839
Зададим имя этой папке
и когда вы выполните

78
00:04:17,839 --> 00:04:21,890
git status, то не увидете
её.

79
00:04:21,890 --> 00:04:24,550
Вы так же можете использовать
exclusion patterns в файле.

80
00:04:24,550 --> 00:04:28,970
Вы можете определить исключение для
файла tutorial.mp4 или для

81
00:04:28,970 --> 00:04:31,370
файлов с расширением mp4

82
00:04:31,370 --> 00:04:33,700
Вы можете исключить воообще
целую папку, как мы убедились.

83
00:04:33,700 --> 00:04:36,600
Вы можете так же исключить
каждый лог файл

84
00:04:36,600 --> 00:04:39,250
внутри папки log.

85
00:04:39,250 --> 00:04:43,170
Если говорить о логах, то
никто и никогда не должен

86
00:04:43,170 --> 00:04:44,480
включать логи в репозитории.

87
00:04:44,480 --> 00:04:44,920
Почему?

88
00:04:44,920 --> 00:04:47,810
Потому что они каждый раз меняются
по разному, в зависимости о того

89
00:04:47,810 --> 00:04:49,460
кто использует приложение.

90
00:04:49,460 --> 00:04:53,265
Итак, вы скорее всего, вместо исключений
захотите сделать git ignore

91
00:04:53,265 --> 00:04:56,500
что приведет  не только к игнорированию
 всех лог файлов

92
00:04:56,500 --> 00:05:00,240
в локальном репозитории, но и так же
для всего остального.

93
00:05:00,240 --> 00:05:03,730
Итак, тут у нас серверный лог файл
который мы не хотим включать в

94
00:05:03,730 --> 00:05:04,770
наш репозиторий.

95
00:05:04,770 --> 00:05:09,240
Мы сделаем так 
logs/*.log
И тогда никакой лог файл

96
00:05:09,240 --> 00:05:12,290
в этой дирректории
не будет добавлен.

97
00:05:12,290 --> 00:05:13,840
И потом мы сделаем
 git status.

98
00:05:13,840 --> 00:05:16,730
Как можно заметить, тут ни где не указано
 никаких лог файлов.

99
00:05:16,730 --> 00:05:19,980
Потом сделаем коммит.

100
00:05:19,980 --> 00:05:23,280
Ещё одна вещь, которой мы до сих пор
не коснулись, это как удалять

101
00:05:23,280 --> 00:05:25,030
файлы из репозитория.

102
00:05:25,030 --> 00:05:27,520
Можно использовать комманду 
git rm и затем указать имя

103
00:05:27,520 --> 00:05:28,840
файла или папки.

104
00:05:28,840 --> 00:05:32,390
Если вы выполните git rm readme,
то это удалит readme.txt

105
00:05:32,390 --> 00:05:34,610
и затем добавит изменения
в подготовительную зону.

106
00:05:34,610 --> 00:05:37,575
И вы просто можете сделать коммит,
удалить readme и этот файл

107
00:05:37,575 --> 00:05:40,030
просто исчезнет.

108
00:05:40,030 --> 00:05:43,210
Но в случае с лог файлами,
если вы его уже отслеживаете,

109
00:05:43,210 --> 00:05:45,080
то, скорее всего,
не хотите, что бы он был

110
00:05:45,080 --> 00:05:46,055
удалён из файловой системы.

111
00:05:46,055 --> 00:05:49,070
Вы всего лишь хотите, что бы Git
перестал беспокоиться об этом файле.

112
00:05:49,070 --> 00:05:50,650
Перестал отслеживать его.

113
00:05:50,650 --> 00:05:55,290
Что бы сделать это вы можете выполнить
git rm --cached
Это остановит отслеживание

114
00:05:55,290 --> 00:05:58,440
изменений в файле
и отслеживание файла в целом.

115
00:05:58,440 --> 00:06:01,000
Если вы потом сделаете 
git status, вы увидите, что он удалён

116
00:06:01,000 --> 00:06:03,970
Но он не будет удалён из
 файловой системы.

117
00:06:06,020 --> 00:06:08,990
Потом у вас останется неотслеживаемый
лог файл, которому так же можно сделать

118
00:06:08,990 --> 00:06:11,950
такой же git ignore и commit
что бы он не отслеживался.

119
00:06:19,650 --> 00:06:22,150
На первом уровне мы видели
базовую настройку пользователя

120
00:06:22,150 --> 00:06:24,430
и емайла.

121
00:06:24,430 --> 00:06:26,790
Давайте более подробно
рассмотрим настройки,

122
00:06:26,790 --> 00:06:27,945
которые можно сделать.

123
00:06:27,945 --> 00:06:31,140
Вы можете настроить специальную
утилиту для слияния

124
00:06:31,140 --> 00:06:32,950
если вы хотите что бы конфликты
слияния, были более читаемыми.

125
00:06:32,950 --> 00:06:35,410
Это так же очень полезная
фишка, если вы работаете с

126
00:06:35,410 --> 00:06:38,300
Windows или Unix системами, которые
будут конвертировать файлы в

127
00:06:38,300 --> 00:06:41,240
Windows or Unix форматы
когда будет происходить коммит.

128
00:06:41,240 --> 00:06:44,380
Выполнив комманду config --list,
в начале вы увидите основной емайл

129
00:06:44,380 --> 00:06:47,730
а затем емайл конкретно
этого repository репозитория

130
00:06:47,730 --> 00:06:50,160
Второй перезаписывает
предыдущий.

131
00:06:50,160 --> 00:06:53,740
Вы можете убедиться в этом
 выполнив git config user.email

132
00:06:53,740 --> 00:06:56,900
внутри нашего репозитория.
Какой емайл для него

133
00:06:56,900 --> 00:06:58,020
установлен.

134
00:06:58,020 --> 00:07:02,280
И затем можно будет увидеть
какой емайл используется на данный момент.

135
00:07:02,280 --> 00:07:04,560
Если вы помните форматы логов,
которые мы проходили в начале

136
00:07:04,560 --> 00:07:07,510
этого уровня, то тут
есть целая куча

137
00:07:07,510 --> 00:07:09,290
хитрых опций, 
которые можно использовать.

138
00:07:09,290 --> 00:07:11,300
Их все реально трудно запомнить.

139
00:07:11,300 --> 00:07:15,230
Вы можете создать
псевдонимы этих

140
00:07:15,230 --> 00:07:16,190
форматов вывода логов.

141
00:07:16,190 --> 00:07:19,990
Итак, к примеру, вы можете увидеть
мой спец формат лог файлов

142
00:07:19,990 --> 00:07:23,090
заменяющий стандартный ыид логов
на, настроенный лично мной.

143
00:07:23,090 --> 00:07:27,120
Другой популярный формат для вывода
git логов, это lol формат

144
00:07:27,120 --> 00:07:29,450
который показывает вывод
в графическом виде

145
00:07:31,750 --> 00:07:34,640
Тут мы видим мой собственный формат
логов, который делает неплохой вывод

146
00:07:34,640 --> 00:07:38,090
без необходимости вставлять
дополнительные опции.

147
00:07:38,090 --> 00:07:40,570
Когда вы начнёте использовать Git
каждый день, то заметите,

148
00:07:40,570 --> 00:07:43,370
что одни и те же комманды
набираются снова и снова.

149
00:07:43,370 --> 00:07:45,980
Вы используете git status, используете
git checkout, используете

150
00:07:45,980 --> 00:07:47,000
git branch и commit.

151
00:07:47,000 --> 00:07:50,420
Но вы можете объеденить эти комманды
в одну более короткую.

152
00:07:51,830 --> 00:07:54,340
И теперь, если мы просто напишем
git st, мы увидим вывод

153
00:07:54,340 --> 00:07:56,560
git status.

154
00:07:56,560 --> 00:07:59,140
Ну и на это всё для у седьмого уровня.
У вас будет осталось последнее упражнение.

155
00:07:59,140 --> 00:08:01,130
Увидимся в будущих видеоукроках.

